many_pathways
genes.react
?mpathSim
named_paths
genes.react
library(XGR)
install.packages("XGR")
install.packages("XGR", repos="http://R-Forge.R-project.org")
install.packages("dnet")
install.packages("supraHex")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("supraHex")
install.packages("dnet")
install.packages("XGR", repos="http://R-Forge.R-project.org")
install.packages("RCircos")
install.packages("XGR", repos="http://R-Forge.R-project.org")
library(XGR)
library(igraph)
library(dnet)
library(GenomicRanges)
# a) provide the seed nodes/genes with the weight info
## load ImmunoBase
ImmunoBase <- xRDataLoader(RData.customised='ImmunoBase')
## get genes within 500kb away from AS GWAS lead SNPs
seeds.genes <- ImmunoBase$AS$genes_variants
## seeds weighted according to distance away from lead SNPs
data <- 1- seeds.genes/500000
# b) perform priority analysis
pNode <- xPrioritiserGenes(data=data,
network="PCommonsDN_medium",restart=0.7)
xPrioritiserGenes
install.packages("PI", repos="http://R-Forge.R-project.org")
install.packages("ggbio")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ggbio")
install.packages("PI", repos="http://R-Forge.R-project.org")
pNode <- xPrioritiserGenes(data=data,
network="PCommonsDN_medium",restart=0.7)
library(PI)
pNode <- xPrioritiserGenes(data=data,
network="PCommonsDN_medium",restart=0.7)
# c) derive pathway-level priority
eTerm <- xPrioritiserPathways(pNode=pNode, priority.top=100,
ontology="MsigdbC2CPall")
# d) view enrichment results for the top significant terms
xEnrichViewer(eTerm)
# e) save enrichment results to the file called 'Pathways_priority.txt'
res <- xEnrichViewer(eTerm, top_num=length(eTerm$adjp), sortBy="adjp",
details=TRUE)
output <- data.frame(term=rownames(res), res)
utils::write.table(output, file="Pathways_priority.txt", sep="\t",
row.names=FALSE)
?eTerm
term_info
eTerm
rownames(res)
output
output
pNode
?clean_pathways
clean_pathways
data(examplePathways)
data(exampleRanks)
library(devtools)
install_github("ctlab/fgsea")
library(data.table)
library(fgsea)
library(ggplot2)
data(examplePathways)
data(exampleRanks)
exampleRanks
library("Seurat")
library("edgeR")
library("tidyverse")
library("anndata")
#  devtools::install_version("Matrix")
setwd(workDir)
setwd("../../OneDrive - Sonata Therapeutics Inc/CRC_Immunogenicity/Lung_Sikkema")
ad <- read_h5ad("lungTumor.h5ad")
seurat <- Convert(ad, dest="h5seurat")
SeuratDisk::Convert(ad, dest = "h5seurat", overwrite = T)
library(SeuratDisk)
SeuratDisk::Convert(ad, dest = "h5seurat", overwrite = T)
devtools::install_github("cellgeni/sceasy")
sceasy::convertFormat(ad, from="anndata", to="seurat", outFile='lungTumor.rds')
library("Seurat")
library("edgeR")
library("tidyverse")
library("anndata")
library("SeuratDisk")
#  devtools::install_version("Matrix")
setwd(workDir)
library("sceasy")
sceasy::convertFormat(ad, from="anndata", to="seurat", outFile='lungTumor.rds')
?convertFormat
?sceasy
library("sceasy")
sceasy::convertFormat(ad, from="anndata", to="seurat", outFile='./lungTumor.rds')
sceasy::convertFormat
sceasy::convertFormat(ad, from="anndata", to="seurat", outFile='./lungTumor.rds')
sceasy::convertFormat(ad, from="anndata", to="seurat", outFile='lungTumor.rds')
sceasy::convertFormat(ad, from="anndata", to="seurat", outFile="lungTumor.rds")
sceasy::convertFormat(ad, from="anndata", to="seurat", outFile="lungTumor.rds")
file.path(workDir, "../../OneDrive - Sonata Therapeutics Inc/CRC_Immunogenicity/Lung_Sikkema")
sceasy::convertFormat(ad, from="anndata", to="seurat", outFile='./lungTumor.rds')
SeuratDisk::Convert(ad, dest = "h5seurat", overwrite = T)
ad.obs
ad$obs
liif (!require("BiocManager", quietly = TRUE))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("flowWorkspace")
library(flowWorkspace)
sessionInfo()
remove.packages(flowWorkspace)
remove.packages("flowWorkspace")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("flowWorkspace")
library(flowWorkspace)
sessionInfo()
remove.packages("flowWorkspace")
sessionInfo()
sessionInfo()
sessionInfo()
install.packages("BiocManager")
sessionInfo()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("flowWorkspace")
n
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("flowWorkspace")
install.packages("BiocManager")
BiocManager::install("flowWorkspace")
library(flowWorkspace)
BiocManager::install("flowWorkspace")
BiocManager::install("flowWorkspace", version = "devel")
nstall.packages("devtools")   # unnecessary if you have it already
install.packages("devtools")   # unnecessary if you have it already
devtools::install_github("Bioconductor/BiocManager", ref="ghost-binary-repo")
BiocManager::install("flowWorkspace", version = "devel")
BiocManager::install("flowWorkspace", version = "devel")
BiocManager::install("flowWorkspace")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("flowWorkspace")
install.packages("devtools")
require(devtools)
install_github("TranslationalBioinformaticsUnit/GeneSetCluster")
install.packages("STRINGdb")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("STRINGdb")
install.packages("devtools")
require(devtools)
install_github("TranslationalBioinformaticsUnit/GeneSetCluster")
install.packages("devtools")
require(devtools)
install_github("TranslationalBioinformaticsUnit/GeneSetCluster")
require(GeneSetCluster)
require(GeneSetCluster)
Canonical.files <- c(system.file("extdata", "MM10.IPA.KO.uGvsMac.Canonical_pathways.xls", package = "GeneSetCluster"),
system.file("extdata", "MM10.IPA.WT.uGvsMac.Canonical_pathways.xls", package = "GeneSetCluster"))
Canonical.files
IPA.KOvsWT <- ObjectCreator(Pathways = c(MM10.IPA.KO.uGvsMac.Canonical.sig$`Ingenuity Canonical Pathways`,
MM10.IPA.WT.uGvsMac.Canonical.sig$`Ingenuity Canonical Pathways`),
Molecules = c(MM10.IPA.KO.uGvsMac.Canonical.sig$Molecules,
MM10.IPA.WT.uGvsMac.Canonical.sig$Molecules),
Groups = c(rep("KO", times=nrow(MM10.IPA.KO.uGvsMac.Canonical.sig)),
rep("WT", times=nrow(MM10.IPA.WT.uGvsMac.Canonical.sig))),
Source = "IPA", Type = "Canonical", structure = "SYMBOL", sep = ",", organism = "org.Mm.eg.db")
require(readxl)
MM10.IPA.KO.uGvsMac.Canonical <- read_excel(path = Canonical.files[1], skip = 1, sheet = 1)
MM10.IPA.WT.uGvsMac.Canonical <- read_excel(path = Canonical.files[2], skip = 1, sheet = 1)
MM10.IPA.KO.uGvsMac.Canonical <- as.data.frame(MM10.IPA.KO.uGvsMac.Canonical)
MM10.IPA.WT.uGvsMac.Canonical <- as.data.frame(MM10.IPA.WT.uGvsMac.Canonical)
require(limma)
MM10.IPA.KO.uGvsMac.Canonical$MoleculesCount <- NA
for(can.i in 1:nrow(MM10.IPA.KO.uGvsMac.Canonical))
{
mol <- as.vector(strsplit2(MM10.IPA.KO.uGvsMac.Canonical[can.i,"Molecules"], split=","))
MM10.IPA.KO.uGvsMac.Canonical[can.i,"MoleculesCount"]  <- length(mol)
}
head(MM10.IPA.KO.uGvsMac.Canonical)
MM10.IPA.WT.uGvsMac.Canonical$MoleculesCount <- NA
for(can.i in 1:nrow(MM10.IPA.WT.uGvsMac.Canonical))
{
mol <- as.vector(strsplit2(MM10.IPA.WT.uGvsMac.Canonical[can.i,"Molecules"], split=","))
MM10.IPA.WT.uGvsMac.Canonical[can.i,"MoleculesCount"]  <- length(mol)
}
####################
MM10.IPA.KO.uGvsMac.Canonical.sig <- MM10.IPA.KO.uGvsMac.Canonical[MM10.IPA.KO.uGvsMac.Canonical$`-log(p-value)` > 1.31 & MM10.IPA.KO.uGvsMac.Canonical$MoleculesCount > 5,]
MM10.IPA.WT.uGvsMac.Canonical.sig <- MM10.IPA.WT.uGvsMac.Canonical[MM10.IPA.WT.uGvsMac.Canonical$`-log(p-value)` > 1.31 & MM10.IPA.WT.uGvsMac.Canonical$MoleculesCount > 5,]
####################
IPA.KOvsWT <- ObjectCreator(Pathways = c(MM10.IPA.KO.uGvsMac.Canonical.sig$`Ingenuity Canonical Pathways`,
MM10.IPA.WT.uGvsMac.Canonical.sig$`Ingenuity Canonical Pathways`),
Molecules = c(MM10.IPA.KO.uGvsMac.Canonical.sig$Molecules,
MM10.IPA.WT.uGvsMac.Canonical.sig$Molecules),
Groups = c(rep("KO", times=nrow(MM10.IPA.KO.uGvsMac.Canonical.sig)),
rep("WT", times=nrow(MM10.IPA.WT.uGvsMac.Canonical.sig))),
Source = "IPA", Type = "Canonical", structure = "SYMBOL", sep = ",", organism = "org.Mm.eg.db")
IPA.KOvsWT <- CombineGeneSets(IPA.KOvsWT)
require(ggplot2)
OptimalGeneSets(object = IPA.KOvsWT, method = "gap", max_cluster = 15, cluster_method = "kmeans", main = "IPA.KOvsWT")
IPA.KOvsWT <- ClusterGeneSets(Object = IPA.KOvsWT, clusters = 6,method = "kmeans", order = "cluster" )
PlotGeneNetworks(IPA.KOvsWT, labels = F, RRmin = 5)
PlotGeneSets(Object = IPA.KOvsWT, annotation.mol = F, main = "IPA.KOvsWT with 10 kmeans clusters")
PlotGeneSets(Object = IPA.KOvsWT, annotation.mol = F, main = "IPA.KOvsWT with 10 kmeans clusters", RR.max = 90, cluster.order = c(1,8,3,4,5,6,7,9,10,2))
require(WebGestaltR)
IPA.KOvsWT.ORA.all <- ORAGeneSets(Object = IPA.KOvsWT, ORA.returned = 10, unique.per.cluster = F)
IPA.KOvsWT.String.all <- GetSTRINGdbPerGeneSets(Object = IPA.KOvsWT, unique.per.cluster = F)
jaccard <- function(A,B)
{
#The Jaccard similarity index compares members
#for two sets to see which members are shared and which are distinct.
#It's a measure of similarity for the two sets of data, with a range from 0% to 100%.
#The higher the percentage, the more similar the two populations.
M <- sum(as.vector(A) == 1 & as.vector(B) == 1)
A.c <- sum(as.vector(A) == 1 & as.vector(B) == 0)
B.c <- sum(as.vector(A) == 0 & as.vector(B) == 1)
J <- M/(A.c+B.c+M)
return(J)
}
IPA.Object.J <- CombineGeneSets(Object = IPA.object1, combineMethod = "Jaccard", combineMethod.supplied = jaccard)
?PlotGeneSets
IPA.files <- c(system.file("extdata",
"MM10.IPA.KO.uGvsMac.Canonical_pathways.xls",
package = "GeneSetCluster"),
system.file("extdata",
"MM10.IPA.WT.uGvsMac.Canonical_pathways.xls",
package = "GeneSetCluster"),
system.file("extdata",
"MM10.IPA.KO.uGvsMac.Functional_annotations.xls",
package = "GeneSetCluster"),
system.file("extdata",
"MM10.IPA.WT.uGvsMac.Functional_annotations.xls",
package = "GeneSetCluster"))
canonical.files <- IPA.files[grep("Canonical", IPA.files)]
IPA.object1 <- LoadGeneSets(file_location = canonical.files,
groupnames= c("KO", "WT"),
P.cutoff = 1.3,
Mol.cutoff = 5,
Source = "IPA",
type = "Canonical_Pathways",
structure = "SYMBOL",
seperator = ",")
IPA.object2 <- CombineGeneSets(Object = IPA.object1)
IPA.object3 <- ClusterGeneSets(Object = IPA.object2,
clusters = 12,
method = "kmeans")
system.file("data", "Redox.genes.rda", package = "testdat")
IPA.object3.highlight <- HighlightGeneSets(Object = IPA.object3,
highligt.genes = Redox.genes,
name = "Ros")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("simplifyEnrichment")
library(synapser)
install.packages("synapser", repos=c("http://ran.synapse.org", "http://cran.fhcrc.org"))
library(ComplexHeatmap)
?oncoPrint
log2(1.25)
log2(1.5)
log2(1)
2^1.5
2^1
2^1.25
log2(1.25)
if(!(0.01 <= alpha || alpha <= 0.1)){
print("Warning: alpha is the statistical significance level, and is usually between 0.01 and 0.1")
}
alpha=0.2
if(!(0.01 <= alpha || alpha <= 0.1)){
print("Warning: alpha is the statistical significance level, and is usually between 0.01 and 0.1")
}
alpha=0.1
if(!(0.01 <= alpha || alpha <= 0.1)){
print("Warning: alpha is the statistical significance level, and is usually between 0.01 and 0.1")
}
alpha=0.0.5
alpha=0.05
if(!(0.01 <= alpha || alpha <= 0.1)){
print("Warning: alpha is the statistical significance level, and is usually between 0.01 and 0.1")
}
!(0.01 <= alpha || alpha <= 0.1)
alpha=0.3
!(0.01 <= alpha || alpha <= 0.1)
alpha=0.0.5
alpha=0.05
!(0.01 <= alpha || alpha <= 0.1)
alpha=0.03
!(0.01 <= alpha || alpha <= 0.1)
alpha=0.00003
!(0.01 <= alpha || alpha <= 0.1)
0.01 <= alpha
alpha
alpha <= 0.1
0.01 <= alpha || alpha <= 0.1
0.01 <= alpha | alpha <= 0.1
alpha <= 0.1
alpha
0.01 <= alpha & alpha <= 0.1
alpha = 0.05
0.01 <= alpha & alpha <= 0.1
alpha = 0.5
0.01 <= alpha & alpha <= 0.1
0.01 <= alpha &$ alpha <= 0.1
0.01 <= alpha && alpha <= 0.1
0.01 <= alpha & alpha <= 0.1
alpha = 0.5
0.01 <= alpha & alpha <= 0.1
alpha = 0.05
0.01 <= alpha & alpha <= 0.1
0.01 <= alpha && alpha <= 0.1
0.01 <= alpha & alpha <= 0.1
0.01 <= alpha & alpha <= 0.1
alpha=0.05
0.01 <= alpha & alpha <= 0.1
alpha=0.3
0.01 <= alpha & alpha <= 0.1
if(!(0.01 <= alpha & alpha <= 0.1)){
print("Warning: alpha is the statistical significance level, and is usually between 0.01 and 0.1")
}
alpha=0.05
if(!(0.01 <= alpha & alpha <= 0.1)){
print("Warning: alpha is the statistical significance level, and is usually between 0.01 and 0.1")
}
alpha=0.00005
if(!(0.01 <= alpha & alpha <= 0.1)){
print("Warning: alpha is the statistical significance level, and is usually between 0.01 and 0.1")
}
library(flowAI)
flow_auto_qc()
?flow_auto_qc()
x = rnorm(100000)
x
IQR(x)
mad(x)
IQR(x-2)
x-2
IQR(x-2)
IQR((x-2))
mad(x-2)
dd<-x-10
IQR(dd)
library(clusterProfiler)
?enrichPathway
library("SummarizedExperiment")
library("TCGAbiolinks")
library(edgeR)
library(limma)
library(scater)
library(dplyr)
?enrichPathway
library(ReactomePA)
install.packages("odbc")
setwd(workDir)
setwd("../Desktop/PRJNA283923/RNAseq/")
test
-log10(20)
library("edgeR")
library("tidyverse")
library("GSVA")
library(pheatmap)
sessionInfo()
?ssgseaParam
?pheatmap
library("edgeR")
library("tidyverse")
library("GSVA")
library(pheatmap)
sessionInfo()
library("edgeR")
library("tidyverse")
library(pheatmap)
library(EnhancedVolcano)
sessionInfo()
library("edgeR")
library("tidyverse")
library("pheatmap")
library(edgeR)
library(reshape2)
library("GSVA")
library("pheatmap")
library("fgsea")
#  devtools::install_version("Matrix")
setwd(workDir)
setwd("../../OneDrive - Sonata Therapeutics Inc/Immunogenicity/Lung_Bulk/")
FOLDER <- "TCGAfull"
load(paste0(FOLDER,"/TMMandMeta.RData"))
#  devtools::install_version("Matrix")
setwd(workDir)
load("../../../CellLines/CCLE/All_Cells/FeatureSelection/Genes.RData")
load("../../CellLines/CCLE/All_Cells/FeatureSelection/Genes.RData")
load(paste0(workDir, "../../OneDrive - Sonata Therapeutics Inc/CellLines/CCLE/All_Cells/FeatureSelection/Genes.RData"))
setwd(workDir)
load(paste0(workDir, "../../OneDrive - Sonata Therapeutics Inc/CellLines/CCLE/All_Cells/FeatureSelection/Genes.RData"))
setwd(workDir)
Lung <- TMM
View(Lung)
Meta
load(paste0(workDir, "../../OneDrive - Sonata Therapeutics Inc/CellLines/CCLE/All_Cells/FeatureSelection/Genes.RData"))
library("edgeR")
library("tidyverse")
library("pheatmap")
library(edgeR)
library(reshape2)
library("GSVA")
library("pheatmap")
library("fgsea")
#  devtools::install_version("Matrix")
load(paste0(workDir, "../../OneDrive - Sonata Therapeutics Inc/CellLines/CCLE/All_Cells/FeatureSelection/Genes.RData"))
setwd(workDir)
load("../../OneDrive - Sonata Therapeutics Inc/Immunogenicity/Lung_Bulk/TCGAfull/TMMandMeta.RData")
Lung <- TMM
LungMeta <- Lung
View(LungMeta)
LungMeta <- Meta
View(LungMeta)
library("edgeR")
library("tidyverse")
library("pheatmap")
library(edgeR)
library(reshape2)
library("GSVA")
library("pheatmap")
library("fgsea")
#  devtools::install_version("Matrix")
load(paste0(workDir, "../../OneDrive - Sonata Therapeutics Inc/CellLines/CCLE/All_Cells/FeatureSelection/Genes.RData"))
setwd(workDir)
load("../../OneDrive - Sonata Therapeutics Inc/Immunogenicity/Pancreas_BulkCollection/TCGA/TMM_ICR.RData")
ICR
load("../../OneDrive - Sonata Therapeutics Inc/Immunogenicity/TCGA/Breast/TMMandMeta.RData")
load("../../OneDrive - Sonata Therapeutics Inc/Immunogenicity/TCGA/Colon/TMMandMeta.RData")
# melanoma
load("../../OneDrive - Sonata Therapeutics Inc/Immunogenicity/TCGA/Skin/TMMandMeta.RData")
# melanoma
load("../../OneDrive - Sonata Therapeutics Inc/Immunogenicity/TCGA/Skin/TMMandMeta.RData")
# melanoma
load("../../OneDrive - Sonata Therapeutics Inc/Immunogenicity/TCGA/Skin/TMMandMeta.RData")
library("edgeR")
library("tidyverse")
library("pheatmap")
library(edgeR)
library(reshape2)
library("GSVA")
library("pheatmap")
library("fgsea")
#  devtools::install_version("Matrix")
load(paste0(workDir, "../../OneDrive - Sonata Therapeutics Inc/CellLines/CCLE/All_Cells/FeatureSelection/Genes.RData"))
setwd(workDir)
# melanoma
load("../../OneDrive - Sonata Therapeutics Inc/Immunogenicity/TCGA/Skin/TMMandMeta.RData")
Skin <- TMM
SkinMeta <- Meta
library("edgeR")
library("tidyverse")
library("pheatmap")
library(edgeR)
library(reshape2)
library("GSVA")
library("pheatmap")
library("fgsea")
#  devtools::install_version("Matrix")
### Select the number of genes
load(paste0(workDir, "../../OneDrive - Sonata Therapeutics Inc/CellLines/CCLE/All_Cells/FeatureSelection/Genes.RData"))
GenesFDRTresh  # this are the 1001 genes form the pvalue threshold
GenesFDRTresh2 <- GenesFDRTresh
# GenesFDRTresh2  <- unique(c(GenesReactomeSelected, GenesFDRTresh))
# GenesFDRTresh2 <- rownames(DEGsLowHigh)[1:5000]
load("../../OneDrive - Sonata Therapeutics Inc/Immunogenicity/ICR_genes.RData")
plot(1:10)
?lm
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
lm.D90 <- lm(weight ~ group - 1) # omitting intercept
anova(lm.D9)
summary(lm.D90)
opar <- par(mfrow = c(2,2), oma = c(0, 0, 1.1, 0))
plot(lm.D9, las = 1)      # Residuals, Fitted, ...
par(opar)]
plot(4,4)
plot(1:10,2:20)
plot(1:10,2:11)
samples<- c(74, 6,105,5,110,92,120,67,12,17,7,74,72,124,8,12,100,93,10,68,69)
mean(samples)
Data <- samples - mean(samples)
Tot <- sum(Data^2)
Tot/(21)
SessionInfo`(0`
SessionInfo()
sessionInfo()
library(flowAI)
?flow_auto_qc
median(c(100,100,100,98,98,98,97,96,96,85,85,85,85,85,85,85,85,85,85,rep(70,11)))
(860-980)/120
install.packages("~/Dropbox/_flowAI/FlowAI_archive/flowAI-devel.zip", repos = NULL, type="source")
install.packages("~/Dropbox/_flowAI/FlowAI_archive/flowAI_1.33.1.tar.gz", repos = NULL, type="source")
?setdiff
variance([1,2,2,2,2,2,3])
variance(c(1,2,2,2,2,2,3))
var(c(1,2,2,2,2,2,3))
devtools::document()
setwd("/Users/giannim/Library/CloudStorage/Dropbox/_flowAI/flowAI")
devtools::document()
